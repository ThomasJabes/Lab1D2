
LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000819  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003af  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000121  00000000  00000000  00001833  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  8e:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
	0b01101101  // 5
};

void setup() {
	// Configuración de los pines del display de 7 segmentos como salida
	SEGMENT_DDR = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
	SEGMENT_PORT = 0x00;
  9a:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0; // Bloquear comunicacionn Serial 
  9c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Configuración del pin del botón como entrada con pull-up
	BUTTON_DDR &= ~(1 << BUTTON);
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	84 b9       	out	0x04, r24	; 4
	BUTTON_PORT |= (1 << BUTTON);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <display_digit>:
}

void display_digit(uint8_t digit) {
	SEGMENT_PORT = segment_digits[digit];
  ae:	e8 2f       	mov	r30, r24
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	80 81       	ld	r24, Z
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	08 95       	ret

000000bc <main>:
}

int main(void) {
	setup();
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <setup>

	while (1) {
		// Espera hasta que se presione el botón
		if (!(BUTTON_PIN & (1 << BUTTON))) {
  c0:	1d 99       	sbic	0x03, 5	; 3
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	80 e7       	ldi	r24, 0x70	; 112
  c8:	92 e0       	ldi	r25, 0x02	; 2
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0xe>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x18>
  d4:	00 00       	nop
			// Espera un breve momento para debounce
			_delay_ms(50);
			if (!(BUTTON_PIN & (1 << BUTTON))) {
  d6:	1d 99       	sbic	0x03, 5	; 3
  d8:	f3 cf       	rjmp	.-26     	; 0xc0 <main+0x4>
  da:	0e c0       	rjmp	.+28     	; 0xf8 <main+0x3c>
				// Inicia el conteo regresivo
				for (int i = 5; i >= 0; i--) {
					display_digit(i);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 57 00 	call	0xae	; 0xae <display_digit>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x2c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x36>
  f2:	00 00       	nop
		if (!(BUTTON_PIN & (1 << BUTTON))) {
			// Espera un breve momento para debounce
			_delay_ms(50);
			if (!(BUTTON_PIN & (1 << BUTTON))) {
				// Inicia el conteo regresivo
				for (int i = 5; i >= 0; i--) {
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x40>
  f8:	c5 e0       	ldi	r28, 0x05	; 5
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	dd 23       	and	r29, r29
  fe:	74 f7       	brge	.-36     	; 0xdc <main+0x20>
					display_digit(i);
					_delay_ms(1000); // Retraso de 1 segundo entre cada número
				}
				// Apaga el display al finalizar el conteo
				SEGMENT_PORT = 0x00;
 100:	1b b8       	out	0x0b, r1	; 11

				// Espera hasta que el botón sea liberado antes de continuar
				while (!(BUTTON_PIN & (1 << BUTTON))) {
 102:	09 c0       	rjmp	.+18     	; 0x116 <main+0x5a>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x4e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x58>
 114:	00 00       	nop
 116:	1d 9b       	sbis	0x03, 5	; 3
 118:	f5 cf       	rjmp	.-22     	; 0x104 <main+0x48>
 11a:	d2 cf       	rjmp	.-92     	; 0xc0 <main+0x4>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
